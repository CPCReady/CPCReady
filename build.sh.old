#!/bin/bash

set -e


# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m' # Sin color

# Función para imprimir en verde
print_ok() {
    echo -e "${WHITE}[${GREEN}   OK    ${WHITE}] $1${NC}"
}

print_start() {
    echo -e "${WHITE}[${GREEN}  START  ${WHITE}] ${BLUE}$1${NC}"
}

print_error () {
    echo
    echo -e "${WHITE}[${RED} ERROR  ${WHITE}] $1${NC}"
    echo
}

print_warning () {
    echo
    echo -e "${WHITE}[${YELLOW} WARNING ${WHITE}] $1${NC}"
    echo
}

if [ $# -eq 0 ]; then
    print_error "Error: No se pasó Version."
    echo "Uso: $0 <version>"
    exit 1
fi


# Version MAC
APPLE_SILICON_VERSION="11"
APPLE_x86_64_VERSION="10.14"
VERSION="$1"

function compile {
    FILENAME="$1"
    COMPILE_FILE="$FILENAME.c"
    COMPILE_PATH="bin/$FILENAME"
    COMPILE_DIST="bin/$FILENAME/bin"
    COMPILE_SRC="bin/$FILENAME/src"
    print_start "Compile $FILENAME"
    if [ -d "$COMPILE_DIST" ]; then
    # Si el directorio existe, elimínalo
        rm -rf "$COMPILE_DIST"
        print_ok "Delete temporal files: $FILENAME"
    fi
    mkdir -p "$COMPILE_DIST"
    
    # Compilar para Apple Silicon (arm64) con macOS 11 como versión mínima
    clang -target arm64-apple-macos$APPLE_SILICON_VERSION -o "$COMPILE_DIST/$FILENAME"-osx-arm64 "$COMPILE_SRC/$COMPILE_FILE"
    print_ok "Compile apple silicon: $FILENAME"-osx-arm64
    # Compilar para Intel (x86_64) con macOS 10.14 como versión mínima
    clang -target x86_64-apple-macos$APPLE_x86_64_VERSION -o "$COMPILE_DIST/$FILENAME"-osx-x86_64 "$COMPILE_SRC/$COMPILE_FILE"
    print_ok "Compile apple x86_64: $FILENAME"-osx-x86_64
    # Crear el binario universal
    lipo -create -output $COMPILE_DIST/$FILENAME-osx-universal "$COMPILE_DIST/$FILENAME"-osx-arm64 "$COMPILE_DIST/$FILENAME"-osx-x86_64
    print_ok "Compile apple universal: $FILENAME"-osx-universal
    x86_64-linux-musl-gcc -o $COMPILE_DIST/$FILENAME-linux-x86_64 "$COMPILE_SRC/$COMPILE_FILE"
    print_ok "Compile Linux: $FILENAME"-linux-x86_64
    # Verificar el binario universal
    # file $COMPILE_DIST/$FILENAME-osx-universal
}

# change version
echo "$VERSION" > share/CPCReady/VERSION

# compile c programs
compile "cat2cpc"
compile "cpc-config"

# compile amsdospy console
print_start "Compile amsdospy"
cd bin/amsdospy
print_ok "cChange to path $PWD"
echo
poetry version "$VERSION"
poetry build
echo
SH256_AMSCOPY="$(shasum -a 256 dist/console-$VERSION.tar.gz)"
print_ok "SH256: $SH256_AMSCOPY"

print_start "Login Github"
auth_status=$(gh auth status)

# Verificar si el usuario está autenticado
if [[ $auth_status == *"✓ Logged in to github.com account destroyer-dcf (GH_TOKEN)"* ]]; then
  print_ok "Estás autenticado en GitHub."
else
  print_warning "No estás autenticado en GitHub."
  print_warning  "Iniciando sesión..."
  echo "$GH_TOKEN" | gh auth login --with-token
fi
# echo "y" | gh release delete v1.0.0



exit
# Comprobar si existe la release
release_info=$(gh release view $VERSION 2>&1)

# Verificar si la release existe
if [[ $release_info == *"release not found"* ]]; then
  print_ok "La release con el tag '$VERSION' no existe."
else
  print_warning "La release con el tag '$VERSION' existe. Borrándola..."

  # Eliminar la release
    echo "y" | gh release delete $VERSION

  # Verificar si se eliminó correctamente
  if [ $? -eq 0 ]; then
    print_ok "La release con el tag '$VERSION' ha sido eliminada correctamente."
  else
    print_error "Error al eliminar la release."
  fi
fi

gh release create $VERSION --notes "Primera versión estable" --title "$VERSION"
gh release upload $VERSION dist/console-$VERSION.tar.gz

