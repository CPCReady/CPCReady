./2cdt.linux -n . PEPE33.CDT  > /dev/null 

./2cdt -t 1 -s 2 -m 0 -r "HOLA COMO ESTAS" "MAIN.BAS" "PEPE33.CDT"  




function convertAllImages () {
   # CREATE BIN FOLDER IF IT DOES NOT EXIST
   mkdir -p ./${BIN}/

   # IMAGE CONVERSIONS
   cpct_img2tileset -tw 160 -th 200 -scr -of bin -nt assets/screen01.png 
   cpct_img2tileset -tw 160 -th 200 -scr -of bin -nt assets/screen02.png 
   cpct_img2tileset -tw 160 -th 200 -scr -of bin -nt assets/screen03.png 
   cpct_img2tileset -tw 160 -th 200 -scr -of bin -nt assets/screen04.png 
   mv ./assets/*.bin ./${BIN}/
   rm ./assets/*.h
   rm ./assets/*.h.s
}


#--------------------------------------------------------------------------
# Creates the CDT File adding required files in order
#
function createCDT() {
   # Creates the CDT from scratch (removing previous one)
   # and adds all files in their required order
   rm -f ./${TARGET_CDT}
   add2CDT cpctxt "DUNGEON CASTLES" ${OBJ}/dcastles.bas     
   add2CDT cpc    "SCREEN01.BIN"    ${BIN}/screen01.bin
   add2CDT cpc    "SCREEN02.BIN"    ${BIN}/screen02.bin
   add2CDT cpc    "SCREEN03.BIN"    ${BIN}/screen03.bin
   add2CDT cpc    "SCREEN04.BIN"    ${BIN}/screen04.bin
   add2CDT cpctxt "GLOADER.BAS"     ${OBJ}/gloader.bas
   add2CDT cpc    "LEVELS.BIN"      ${BIN}/levels.bin
   add2CDT cpctxt "GAME.BAS"        ${OBJ}/game.bas
}
    
# Adds a single file to the ${TARGET_CDT}
# $1: Type of the file (cpctxt, cpc...)
# $2: Long filename (Up to 16 chars, it will be shown on tape loading)
# $3: Filename      (File that is to be added)
#
function add2CDT() {
   local TYPE="$1"
   local TAPENAME="$2"
   local FILENAME="$3"

   $CPC2CDT -t -b 2000 -m "$TYPE" -r "$TAPENAME" "$FILENAME" "$TARGET_CDT"
}

#---    
    
    IMAGE_TMP_FILE = os.path.basename(os.path.splitext(filename)[0])

    ########################################
    # WE CHECK IF WE COMPLY WITH RULE 6:3
    ########################################

    if len(IMAGE_TMP_FILE) > 6:
        IMAGE_TMP_TXT = IMAGE_TEMP_PATH + "/" + IMAGE_TMP_FILE[:6] + ".TXT"
        IMAGE_TMP_CTXT = IMAGE_TEMP_PATH + "/" + IMAGE_TMP_FILE[:6] + "C.TXT"
    else:
        IMAGE_TMP_TXT = IMAGE_TEMP_PATH + "/" + IMAGE_TMP_FILE + ".TXT"
        IMAGE_TMP_CTXT = IMAGE_TEMP_PATH + "/" + IMAGE_TMP_FILE + "C.TXT"
        
    IMAGE_TMP_JSON = IMAGE_TEMP_PATH + "/" + IMAGE_TMP_FILE + ".json"




pip uninstall dist/CPCReady-0.0.1-py3-none-any.whl     
pip install dist/CPCReady-0.0.1-py3-none-any.whl
python -m build

Teniendo esta estructura de un modulo python

├── CPCReady
│   ├── common.py
│   ├── func_project.py
│   ├── func_screen.py
│   ├── func_sprite.py
│   ├── __init__.py
│   ├── project.py
│   ├── screen.py
│   ├── sprite.py
│   ├── templates
│   │   ├── cpc.j2
│   │   ├── cpc_yaml.j2
│   │   ├── MAIN.BAS.j2
│   │   └── Makefile
│   └── tools
│       ├── darwin
│       │   ├── iDSK
│       │   └── martine
│       ├── linux
│       │   ├── iDSK
│       │   └── martine
│       └── win64
│           ├── cyggcc_s-1.dll
│           ├── cygwin1.dll
│           ├── iDSK.exe
│           └── martine.exe
├── MANIFEST.in
├── setup.py

que tengo que poner tanto en el archivo manifest como setup.py para incluir tanto la carpeta templates como la tools con todos sus archivos en el modulo empaquetado y que cuando se instale lo haga dentro del raiz CPCReady