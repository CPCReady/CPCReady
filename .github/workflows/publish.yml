name: publish

on:
  push:
    branches:
      - 51-add-cpcemu

# on:
#   pull_request:
#     branches:
#       - main

jobs:
  publish:
    permissions: write-all 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: CPCReady
            asset_name: CPCReady-linux-amd64
          - os: macos-latest
            artifact_name: CPCReady
            asset_name: CPCReady-macos-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install zip
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt-get install zip

    - name: Extract version from VERSION file
      id: extract_version
      run: |
        VERSION=$(cat VERSION)
        echo "Version: $VERSION"
        echo "::set-output name=version::$VERSION"

    # - uses: actions/download-artifact@v4
    #   with:
    #     name: configuration-linux-amd64
    #     path: tools
    #     repository: CPCReady/configuration
    # - name: Download Release
    #   run: |
    #     curl -sSL -o bin/configuration https://github.com/CPCReady/configuration/releases/download/v1.0.0/configuration-${{ matrix.asset_name }}
    #     ls -l tools

    - name: compile configurations
      run: |
        cd tools/configuration
        mkdir dist
        gcc src/configuration.c -o dist/configuration

    - name: move configurations
      run: |
        cp tools/configuration/dist/configuration bin/configuration
        chmod 777 bin/configuration

    - uses: actions/upload-artifact@v4
      with:
        name: configuration-${{ matrix.asset_name }}
        path: bin/configuration

    - name: compile amstrad-console
      run: |
        cd tools/amstrad-console
        pip3 install poetry --break-system-packages
        poetry version ${{ steps.extract_version.outputs.version }}
        poetry install
        poetry build

    - name: move amstrad-console
      run: |
        cp tools/amstrad-console/dist/console-${{ steps.extract_version.outputs.version }}-py3-none-any.whl bin/lib/console-${{ steps.extract_version.outputs.version }}-py3-none-any.whl

    - name: make idsk
      run: |
        cd tools/IDSK+
        mkdir bin
        make clean
        make

    - name: move configurations
      run: |
        cp tools/IDSK+/bin/iDSK bin/iDSK
        chmod 777 bin/iDSK

    # - name: Create zip file
    #   run: zip -r ${{ matrix.artifact_name }}.zip . -x "*.git*" "*.github*" "*.devcontainer*" "*.vscode*"

    # - name: Create zip file
    #   run: ls -R

    # - name: Upload binaries to release
    #   uses: svenstaro/upload-release-action@v2
    #   with:
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     file: ${{ matrix.artifact_name }}.zip
    #     asset_name: ${{ matrix.asset_name }}.zip
    #     tag: v${{ steps.extract_version.outputs.version }}
    #     overwrite: true
    #     body: "dsfasdffasd"
    # - name: Create release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name: ${{ steps.get-version.outputs.version }}releas
    #     release_name: CPCReady ${{ steps.get-version.outputs.version }}
    #     body: |
    #       CPCReady Release ${{ steps.get-version.outputs.version }}
    #     draft: false
    #     prerelease: false

    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: cpcready
    #     path: CPCReady-${{ steps.get-version.outputs.version }}.zip


      # - name: Bump version and push tag
      #   uses: anothrNick/github-tag-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPO_OWNER: keithweaver