#!/bin/bash
##------------------------------------------------------------------------------
##
##        ██████╗██████╗  ██████╗██████╗ ███████╗ █████╗ ██████╗ ██╗   ██╗
##       ██╔════╝██╔══██╗██╔════╝██╔══██╗██╔════╝██╔══██╗██╔══██╗╚██╗ ██╔╝
##       ██║     ██████╔╝██║     ██████╔╝█████╗  ███████║██║  ██║ ╚████╔╝ 
##       ██║     ██╔═══╝ ██║     ██╔══██╗██╔══╝  ██╔══██║██║  ██║  ╚██╔╝  
##       ╚██████╗██║     ╚██████╗██║  ██║███████╗██║  ██║██████╔╝   ██║   
##        ╚═════╝╚═╝      ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝    ╚═╝   
##
##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCReady Basic programation.
##  Copyright (C) 2024 Destroyer
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU Lesser General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

## Bash Include files
source $(dirname "$0")/lib/library.sh
# Allowed values for the emulator parameter
emulators=("m4" "rvm")

# Function to display help message
function show_help {

    CPCREADY
    echo "Run Files in Emulator"
    echo 
    echo "Use: $(basename "$0") [option]"
    echo "  -e, --emulator Emulator type [M4, RVM]"
    echo "  -d, --dsk      Disk image name."
    echo "  -h, --help     Show this help message."
    echo "  -v, --version  Show version this software."
    echo "Option:"
    echo "  [parameter]  --emulator [M4, RVM]"
    echo "               --dsk "
    echo "               If no default parameters are passed, the values ​"
    echo "               ​of the EMULATOR and DISC environment variables are taken."
    ready
}

# Function to check if a value is in a list
isEmulator() {
    local value="$1"
    value=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    export $EMULATOR="$value"
    shift
    for element; do
        [[ "$element" == "$value" ]] && return 0
    done
    return 1
}

## Chequeamos si existe el archivo de variables.
## si no existe salimos con error
check_env_file

## Cargamos archivo de variables
source "$PATH_CONFIG_PROJECT/$CONFIG_CPCREADY"

## Show logo
CPCREADY


if [[ -z "$EMULATOR" ]]; then
    export EMULATOR="rvm"
fi


# Default values

EMULATOR="$EMULATOR"
DSK="$DISC"

# Check if the help parameter is provided
# Process command line options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -v|--version)
            show_version
            ready
            exit 0
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -e|--emulator)
            if [[ -z "$2" ]]; then
                PRINT "ERROR" "Missing argument for option $1" >&2
            fi
            if ! isEmulator "$2" "${emulators[@]}"; then
                PRINT "ERROR" "The emulator value must be one of ${emulators[*]}" >&2
            fi
            value=$(echo "$2" | tr '[:upper:]' '[:lower:]')
            EMULATOR="$value"
            shift 2
            ;;
        -d|--dsk)
            if [[ -z "$2" ]]; then
                PRINT "ERROR" "Missing argument for option $1" >&2
            fi
            DSK="$2"
            shift 2
            ;;
        *) echo "Invalid option: $1" >&2; exit 1 ;;
    esac
done

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    CPCEMU="$CPCREADY/bin/linux/cpcemu/cpcemu"
    RVM="$CPCREADY/bin/linux/cpcemu/cpcemu"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    CPCEMU="$CPCREADY/bin/osx/CPCemuMacOS.app/Contents/MacOS/CPCemuMacOS"
    RVM="$CPCREADY/bin/osx/rvm.app/Contents/MacOS/rvm"
else
    PRINT ERROR "$OSTYPE Operating system NOT supported."
fi

# Comprobar si el valor es "m4" o "rvm"
# if [[ "$EMULATOR" == "m4" || "$EMULATOR" == "rvm" ]]; then
    # Realizar acciones específicas para "m4" y "disc"
if [[ "$EMULATOR" == "m4" ]]; then
    model_cpc m4$MODEL
    PRINT "OK" "Emulator: CPCEmu."
    PRINT "OK" "Project execute in SD."
    $CPCEMU -f -c "$PWD/$PATH_CONFIG_PROJECT/$CONFIG_CPCEMU" > /dev/null 2>&1 &
elif [[ "$EMULATOR" == "rvm" ]]; then
    if [ ! -e "$OUT_DISC/$DSK" ]; then
        PRINT "ERROR" "$OUT_DISC/$DSK not found."
    fi
    model_cpc $MODEL
    PRINT "OK" "Emulator: RetroVirtualMachine."
    PRINT "OK" "DISC: $DISC"
    PRINT "OK" "run\"disc.bas"
    $RVM -b=cpc$MODEL -i "$OUT_DISC/$DSK" -c='run"disc\n' > /dev/null 2>&1 &
fi    
# else
#    echo
#    PRINT "ERROR" "Bad command"
# fi

ready